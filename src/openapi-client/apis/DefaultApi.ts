/* tslint:disable */
/* eslint-disable */
/**
 * Platform Healthcare API
 * The Platform Healthcare API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
    CreateCertDto,
    CreateDeviceDto,
    CreateOrchestratorDto,
    CreateOrganizationRequestDto,
    CreateRoomDto,
    OrchestratorVerifyLicenseDto,
    UpdateDeviceDto,
    UpdateOrchestratorDto,
    UpdateOrganizationRequestDto,
} from '../models/index';
import {
    CreateCertDtoFromJSON,
    CreateCertDtoToJSON,
    CreateDeviceDtoFromJSON,
    CreateDeviceDtoToJSON,
    CreateOrchestratorDtoFromJSON,
    CreateOrchestratorDtoToJSON,
    CreateOrganizationRequestDtoFromJSON,
    CreateOrganizationRequestDtoToJSON,
    CreateRoomDtoFromJSON,
    CreateRoomDtoToJSON,
    OrchestratorVerifyLicenseDtoFromJSON,
    OrchestratorVerifyLicenseDtoToJSON,
    UpdateDeviceDtoFromJSON,
    UpdateDeviceDtoToJSON,
    UpdateOrchestratorDtoFromJSON,
    UpdateOrchestratorDtoToJSON,
    UpdateOrganizationRequestDtoFromJSON,
    UpdateOrganizationRequestDtoToJSON,
} from '../models/index';

export interface CertControllerCreateRequest {
    createCertDto: CreateCertDto;
}

export interface DeviceControllerCreateRequest {
    organizationId: string;
    orchestratorId: string;
    createDeviceDto: CreateDeviceDto;
}

export interface DeviceControllerCreatedSignedRegistrationUrlRequest {
    organizationId: string;
    orchestratorId: string;
    deviceId: string;
    roomId: string;
}

export interface DeviceControllerFindOneRequest {
    organizationId: string;
    orchestratorId: string;
    id: string;
}

export interface DeviceControllerRemoveRequest {
    organizationId: string;
    orchestratorId: string;
    id: string;
}

export interface DeviceControllerUpdateRequest {
    organizationId: string;
    orchestratorId: string;
    id: string;
    updateDeviceDto: UpdateDeviceDto;
}

export interface OrchestratorControllerAddOrchestratorRequest {
    organizationId: string;
    createOrchestratorDto: CreateOrchestratorDto;
}

export interface OrchestratorControllerDeleteRequest {
    organizationId: string;
    orchestratorId: string;
}

export interface OrchestratorControllerFetchOrchestratorByIdRequest {
    organizationId: string;
    orchestratorId: string;
}

export interface OrchestratorControllerFetchOrchestratorConfigRequest {
    organizationId: string;
    orchestratorId: string;
}

export interface OrchestratorControllerFetchRoleForOrchestratorRequest {
    organizationId: string;
    orchestratorId: string;
}

export interface OrchestratorControllerFindOchestratorsByOrgRequest {
    organizationId: string;
    status?: OrchestratorControllerFindOchestratorsByOrgStatusEnum;
}

export interface OrchestratorControllerUpdateRequest {
    organizationId: string;
    orchestratorId: string;
    updateOrchestratorDto: UpdateOrchestratorDto;
}

export interface OrchestratorLicenseControllerVerifyRequest {
    organizationId: string;
    orchestratorId: string;
    orchestratorVerifyLicenseDto: OrchestratorVerifyLicenseDto;
}

export interface OrganizationControllerAddUserToOrganizationRequest {
    organizationId: string;
    body: object;
}

export interface OrganizationControllerEditUserInOrganizationRequest {
    organizationId: string;
    userId: string;
    body: object;
}

export interface OrganizationControllerFindByIdRequest {
    organizationId: string;
}

export interface OrganizationControllerRegisterRequest {
    createOrganizationRequestDto: CreateOrganizationRequestDto;
}

export interface OrganizationControllerRemoveOrganizationRequest {
    organizationId: string;
}

export interface OrganizationControllerRemoveUserFromOrganizationRequest {
    organizationId: string;
    userId: string;
}

export interface OrganizationControllerUpdateOrganizationRequest {
    organizationId: string;
    updateOrganizationRequestDto: UpdateOrganizationRequestDto;
}

export interface RoomControllerCreateRequest {
    organizationId: string;
    orchestratorId: string;
    createRoomDto: CreateRoomDto;
}

export interface RoomControllerFetchDevicesByRoomRequest {
    organizationId: string;
    orchestratorId: string;
    roomId: string;
}

export interface RoomControllerFindAllRequest {
    organizationId: string;
    orchestratorId: string;
}

export interface RoomControllerFindOneRequest {
    organizationId: string;
    orchestratorId: string;
    roomId: string;
}

export interface RoomControllerRemoveRequest {
    organizationId: string;
    orchestratorId: string;
    roomId: string;
}

export interface RoomControllerUpdateRequest {
    organizationId: string;
    orchestratorId: string;
    roomId: string;
    body: object;
}

export interface UserControllerFindByIdRequest {
    id: string;
}

export interface UserControllerUpdateUserRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async certControllerCreateRaw(requestParameters: CertControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createCertDto'] == null) {
            throw new runtime.RequiredError(
                'createCertDto',
                'Required parameter "createCertDto" was null or undefined when calling certControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/cert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCertDtoToJSON(requestParameters['createCertDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certControllerCreate(requestParameters: CertControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.certControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceControllerCreateRaw(requestParameters: DeviceControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deviceControllerCreate().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling deviceControllerCreate().'
            );
        }

        if (requestParameters['createDeviceDto'] == null) {
            throw new runtime.RequiredError(
                'createDeviceDto',
                'Required parameter "createDeviceDto" was null or undefined when calling deviceControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/device`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceDtoToJSON(requestParameters['createDeviceDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceControllerCreate(requestParameters: DeviceControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceControllerCreatedSignedRegistrationUrlRaw(requestParameters: DeviceControllerCreatedSignedRegistrationUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deviceControllerCreatedSignedRegistrationUrl().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling deviceControllerCreatedSignedRegistrationUrl().'
            );
        }

        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling deviceControllerCreatedSignedRegistrationUrl().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling deviceControllerCreatedSignedRegistrationUrl().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deviceId'] != null) {
            queryParameters['deviceId'] = requestParameters['deviceId'];
        }

        if (requestParameters['roomId'] != null) {
            queryParameters['roomId'] = requestParameters['roomId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/device/signed`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceControllerCreatedSignedRegistrationUrl(requestParameters: DeviceControllerCreatedSignedRegistrationUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceControllerCreatedSignedRegistrationUrlRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceControllerFindOneRaw(requestParameters: DeviceControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deviceControllerFindOne().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling deviceControllerFindOne().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/device/{id}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceControllerFindOne(requestParameters: DeviceControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceControllerRemoveRaw(requestParameters: DeviceControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deviceControllerRemove().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling deviceControllerRemove().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/device/{id}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceControllerRemove(requestParameters: DeviceControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deviceControllerUpdateRaw(requestParameters: DeviceControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deviceControllerUpdate().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling deviceControllerUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deviceControllerUpdate().'
            );
        }

        if (requestParameters['updateDeviceDto'] == null) {
            throw new runtime.RequiredError(
                'updateDeviceDto',
                'Required parameter "updateDeviceDto" was null or undefined when calling deviceControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/device/{id}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDeviceDtoToJSON(requestParameters['updateDeviceDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deviceControllerUpdate(requestParameters: DeviceControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deviceControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerAddOrchestratorRaw(requestParameters: OrchestratorControllerAddOrchestratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerAddOrchestrator().'
            );
        }

        if (requestParameters['createOrchestratorDto'] == null) {
            throw new runtime.RequiredError(
                'createOrchestratorDto',
                'Required parameter "createOrchestratorDto" was null or undefined when calling orchestratorControllerAddOrchestrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrchestratorDtoToJSON(requestParameters['createOrchestratorDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerAddOrchestrator(requestParameters: OrchestratorControllerAddOrchestratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerAddOrchestratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerDeleteRaw(requestParameters: OrchestratorControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerDelete().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorControllerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerDelete(requestParameters: OrchestratorControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerFetchOrchestratorByIdRaw(requestParameters: OrchestratorControllerFetchOrchestratorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerFetchOrchestratorById().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorControllerFetchOrchestratorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerFetchOrchestratorById(requestParameters: OrchestratorControllerFetchOrchestratorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerFetchOrchestratorByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerFetchOrchestratorConfigRaw(requestParameters: OrchestratorControllerFetchOrchestratorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerFetchOrchestratorConfig().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorControllerFetchOrchestratorConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/config`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerFetchOrchestratorConfig(requestParameters: OrchestratorControllerFetchOrchestratorConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerFetchOrchestratorConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerFetchRoleForOrchestratorRaw(requestParameters: OrchestratorControllerFetchRoleForOrchestratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerFetchRoleForOrchestrator().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorControllerFetchRoleForOrchestrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/role`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerFetchRoleForOrchestrator(requestParameters: OrchestratorControllerFetchRoleForOrchestratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerFetchRoleForOrchestratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerFindOchestratorsByOrgRaw(requestParameters: OrchestratorControllerFindOchestratorsByOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerFindOchestratorsByOrg().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerFindOchestratorsByOrg(requestParameters: OrchestratorControllerFindOchestratorsByOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerFindOchestratorsByOrgRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorControllerUpdateRaw(requestParameters: OrchestratorControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorControllerUpdate().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorControllerUpdate().'
            );
        }

        if (requestParameters['updateOrchestratorDto'] == null) {
            throw new runtime.RequiredError(
                'updateOrchestratorDto',
                'Required parameter "updateOrchestratorDto" was null or undefined when calling orchestratorControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrchestratorDtoToJSON(requestParameters['updateOrchestratorDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorControllerUpdate(requestParameters: OrchestratorControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orchestratorLicenseControllerVerifyRaw(requestParameters: OrchestratorLicenseControllerVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling orchestratorLicenseControllerVerify().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling orchestratorLicenseControllerVerify().'
            );
        }

        if (requestParameters['orchestratorVerifyLicenseDto'] == null) {
            throw new runtime.RequiredError(
                'orchestratorVerifyLicenseDto',
                'Required parameter "orchestratorVerifyLicenseDto" was null or undefined when calling orchestratorLicenseControllerVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/license/verify`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrchestratorVerifyLicenseDtoToJSON(requestParameters['orchestratorVerifyLicenseDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orchestratorLicenseControllerVerify(requestParameters: OrchestratorLicenseControllerVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orchestratorLicenseControllerVerifyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerAddUserToOrganizationRaw(requestParameters: OrganizationControllerAddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerAddUserToOrganization().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling organizationControllerAddUserToOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerAddUserToOrganization(requestParameters: OrganizationControllerAddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerAddUserToOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerEditUserInOrganizationRaw(requestParameters: OrganizationControllerEditUserInOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerEditUserInOrganization().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling organizationControllerEditUserInOrganization().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling organizationControllerEditUserInOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/user/{userId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerEditUserInOrganization(requestParameters: OrganizationControllerEditUserInOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerEditUserInOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerFindByIdRaw(requestParameters: OrganizationControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerFindById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerFindById(requestParameters: OrganizationControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerFindByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerRegisterRaw(requestParameters: OrganizationControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createOrganizationRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationRequestDto',
                'Required parameter "createOrganizationRequestDto" was null or undefined when calling organizationControllerRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestDtoToJSON(requestParameters['createOrganizationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerRegister(requestParameters: OrganizationControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerRegisterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerRemoveOrganizationRaw(requestParameters: OrganizationControllerRemoveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerRemoveOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerRemoveOrganization(requestParameters: OrganizationControllerRemoveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerRemoveOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerRemoveUserFromOrganizationRaw(requestParameters: OrganizationControllerRemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerRemoveUserFromOrganization().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling organizationControllerRemoveUserFromOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/user/{userId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerRemoveUserFromOrganization(requestParameters: OrganizationControllerRemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerRemoveUserFromOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organizationControllerUpdateOrganizationRaw(requestParameters: OrganizationControllerUpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling organizationControllerUpdateOrganization().'
            );
        }

        if (requestParameters['updateOrganizationRequestDto'] == null) {
            throw new runtime.RequiredError(
                'updateOrganizationRequestDto',
                'Required parameter "updateOrganizationRequestDto" was null or undefined when calling organizationControllerUpdateOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestDtoToJSON(requestParameters['updateOrganizationRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organizationControllerUpdateOrganization(requestParameters: OrganizationControllerUpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organizationControllerUpdateOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerCreateRaw(requestParameters: RoomControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerCreate().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerCreate().'
            );
        }

        if (requestParameters['createRoomDto'] == null) {
            throw new runtime.RequiredError(
                'createRoomDto',
                'Required parameter "createRoomDto" was null or undefined when calling roomControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoomDtoToJSON(requestParameters['createRoomDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerCreate(requestParameters: RoomControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerFetchDevicesByRoomRaw(requestParameters: RoomControllerFetchDevicesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerFetchDevicesByRoom().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerFetchDevicesByRoom().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomControllerFetchDevicesByRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room/{roomId}/devices`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerFetchDevicesByRoom(requestParameters: RoomControllerFetchDevicesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerFetchDevicesByRoomRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerFindAllRaw(requestParameters: RoomControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerFindAll().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerFindAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerFindAll(requestParameters: RoomControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerFindAllRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerFindOneRaw(requestParameters: RoomControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerFindOne().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerFindOne().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room/{roomId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerFindOne(requestParameters: RoomControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerRemoveRaw(requestParameters: RoomControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerRemove().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerRemove().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room/{roomId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerRemove(requestParameters: RoomControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async roomControllerUpdateRaw(requestParameters: RoomControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling roomControllerUpdate().'
            );
        }

        if (requestParameters['orchestratorId'] == null) {
            throw new runtime.RequiredError(
                'orchestratorId',
                'Required parameter "orchestratorId" was null or undefined when calling roomControllerUpdate().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomControllerUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling roomControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization/{organizationId}/orchestrator/{orchestratorId}/room/{roomId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"orchestratorId"}}`, encodeURIComponent(String(requestParameters['orchestratorId']))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async roomControllerUpdate(requestParameters: RoomControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerFindByIdRaw(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerFindById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerFindById(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerFindByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerGetOrganizationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerGetOrganizations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetOrganizationsRaw(initOverrides);
    }

    /**
     */
    async userControllerUpdateClaimsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user/updateClaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerUpdateClaims(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateClaimsRaw(initOverrides);
    }

    /**
     */
    async userControllerUpdateUserRaw(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerUpdateUser(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateUserRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const OrchestratorControllerFindOchestratorsByOrgStatusEnum = {
    AwaitingSetup: 'AWAITING_SETUP',
    Ready: 'READY'
} as const;
export type OrchestratorControllerFindOchestratorsByOrgStatusEnum = typeof OrchestratorControllerFindOchestratorsByOrgStatusEnum[keyof typeof OrchestratorControllerFindOchestratorsByOrgStatusEnum];
